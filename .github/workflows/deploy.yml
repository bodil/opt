name: Deploy
on:
    push:
        branches:
            - main

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
    group: "pages"
    cancel-in-progress: false

jobs:
    deploy:
        permissions:
            contents: read
            pages: write
            id-token: write
        environment:
            name: github-pages
            url: ${{ steps.deployment.outputs.page_url }}
        name: Deploy Job
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v3
            - uses: denoland/setup-deno@v1
              with:
                  deno-version: v1.x
            - uses: actions/setup-node@v3
              with:
                  node-version: latest
            - name: Setup pnpm
              uses: pnpm/action-setup@v2.2.4
              with:
                  version: latest
                  run_install: false
            - name: Get pnpm store path
              id: pnpm-cache-dir
              shell: bash
              run: |
                  echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
            - name: Setup pnpm cache
              uses: actions/cache@v3
              id: pnpm-cache
              with:
                  path: |
                      ~/.cache
                      ~/.pnpm
                      ${{ steps.pnpm-cache-dir.outputs.STORE_PATH }}
                  key: ${{ runner.os }}-pnpm-${{ hashfiles('**/pnpm-lock.yaml') }}
                  restore-keys: |
                      ${{ runner.os }}-pnpm-
            - name: Get tag version
              if: startsWith(github.ref, 'refs/tags/')
              id: get_tag_version
              run: echo TAG_VERSION=${GITHUB_REF/refs\/tags\//} >> $GITHUB_OUTPUT
            - name: Run Deno tests
              run: deno test
            - name: Build and test Node version
              run: deno run -A ./scripts/build_npm.ts ${{steps.get_tag_version.outputs.TAG_VERSION}}
            - name: Setup Pages
              if: startsWith(github.ref, 'refs/tags/')
              uses: actions/configure-pages@v3
            - name: Upload artifact
              if: startsWith(github.ref, 'refs/tags/')
              uses: actions/upload-pages-artifact@v1
              with:
                  # Upload built artifacts
                  path: "npm/doc"
            - name: Deploy to GitHub Pages
              if: startsWith(github.ref, 'refs/tags/')
              id: deployment
              uses: actions/deploy-pages@v2
            - name: Publish npm package
              if: startsWith(github.ref, 'refs/tags/')
              env:
                  NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
              run: cd npm && pnpm publish
